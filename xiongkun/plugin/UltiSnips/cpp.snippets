#{{{ PADDLE_RAISE 
snippet PADDLE_THROW "raise error by paddle API"
PADDLE_THROW(platform::errors::InvalidArgument(
    ${1:"This argument is invalid, expect %d, get %d"}, ${2:"expected_"}, ${3:"actual_"}));
endsnippet
#}}}

#{{{ PADDLE_ENFORCE_GT
snippet PADDLE_ENFORCE_GT "raise error by paddle API"
PADDLE_ENFORCE_GT(${1:first}, ${2:second}, platform::errors::InvalidArgument(
    ${3:"This argument is invalid, expect %d, get %d"}, ${4:"expected_"}, ${5:"actual_"}));
endsnippet
#}}}

#{{{ unique
snippet std::unique "unique a std::vector or std::list."
std::sort(${1:gc_check_input_list}.begin(), ${1}.end());
auto last =
    std::unique(${1}.begin(), ${1}.end());
${1}.erase(last, ${1}.end());
endsnippet
#}}}

#{{{ platform::errors
snippet platform::errors "platform::errors will list all example of platform::errors"
platform::errors::InvalidArgument(${1:"This argument is invalid %s"}, ${2:name})
endsnippet
#}}}

#{{{ VLOG
snippet VLOG "vlog(N) example"
VLOG(${1:3}) << ${2:"the output"} ; 
endsnippet
#}}}

#{{{ Disable Copy and Assign
snippet DISABLE_COPY_ASSIGN "C++ optimization: Disable copy and assign."
public:  // just declare, don't need definition
  ${1:BigClass}($1 const &) = delete;
  $1& operator = ($1 const &) = delete;
endsnippet
#}}}

#{{{ all class function
snippet CLASS_FUNC "list all CPP function"
public:  // just declare, don't need definition
  ${1:BigClass} ($1 const &) = default;         // copy construct
  $1 ($1 &&) = default noexcept;                         // move construct
  $1() = default;                               // construct 
  ~ $1() = default;                             // deconstruct 
  $1& operator = ($1 const &) = default;        // copy assign
  $1& operator = ($1 &&) = default noexcept;             // move assign
endsnippet
#}}}

#{{{ rvo example
snippet RVO_EXAMPLE "class A example for experiment"
class A{
public:  // just declare, don't need definition
  A (const A &) {
    printf("Copy Construct\n");
  };
  A (A &&) {
    printf("Move Construct\n");
  }
  A(){
    printf("Construct\n");
  };                               // construct
  ~ A() {
    printf("Deconstruct\n");
  }
  A& operator = (A const &){
    printf("copy assign\n");
  }
  A& operator = (A &&) {
    printf("move assign\n");
  }
};
endsnippet
#}}}

#{{{ Scope Guard
snippet ScopeGuard "ScopeGuard Template"
template <typename ReleaseCallback>
class ScopeGuard {
 public:
  explicit ScopeGuard(const ReleaseCallback &callback) : callback_(callback) {}

  ~ScopeGuard() { callback_(); }

 private:
  DISABLE_COPY_ASSIGN $0

 private:
  ReleaseCallback callback_;
};
endsnippet
#}}}

#{{{ PrintTensor
snippet PrintTensor "Print CPU Tensor / GPU Tensor."
{
  framework::Tensor cpu;
  framework::TensorCopy(*out, platform::CPUPlace(), dev_ctx, &cpu);
  VLOG(4) << "in_vars[0] is" << cpu;
  $0
}
endsnippet
#}}}

#{{{ remove_if
snippet std::remove_if "Remove element in vector using lambda example code. like filter in python."
std::vector<int>v = {1,2,3,4};
auto t = std::remove_if(v.begin(), v.end(), [](int a){return a < 2; });
v.resize(t - v.begin());
$0 // vector: v is the returning vector.
endsnippet
#}}}

#{{{ # p_
snippet MV "Create MixVector Wrapper"
paddle::framework::MixVector<${1:size_t}> mixv_${2:name} ( & ${3:vector_name} );
endsnippet
#}}}

snippet print_vector "C++ print a vector by vlog." #{{{
\#include "paddle/utils/string/string_helper.h"
VLOG(2) << "vector: `` value is : " << paddle::string::join_strings(vector, ',');
endsnippet
#}}}

snippet llvm_elog "llvm logger method" #{{{
\#include "support/Logger.h"
elog("config error at {0}:{1}:{2}: {3}", D.getFilename(), D.getLineNo(),
     D.getColumnNo(), D.getMessage());
endsnippet
#}}}

snippet cl_create_diag "Create DiagnosticsEngine" #{{{
llvm::IntrusiveRefCntPtr<DiagnosticsEngine> CommandLineDiagsEngine =
    CompilerInstance::createDiagnostics(new DiagnosticOptions, &D, false);
endsnippet
#}}}
#
#{{{
snippet str "std::string" i 
std::string 
endsnippet
#}}}
#
#{{{  
snippet vec "std::vec<XXX>" i 
std::vector<${1:int}> $0
endsnippet
#}}}

snippet RecordEvent "RecordEvent usage example in paddle."   #{{{
{
  include "paddle/fluid/platform/profiler.h"
  platform::RecordEvent record_event(
      "NpuMemcpyAsync:CPU->NPU", platform::TracerEventType::UserDefined, 1);
  platform::NPUMemcpyAsync(dst, src, num, ACL_MEMCPY_HOST_TO_DEVICE,
                             reinterpret_cast<aclrtStream>(stream));
}

snippet timer "a ms timer for C++11" #{{{
#include<chrono>
#include<iostream>
using namespace std;
using namespace std::chrono;
class TimerClock
{
public:
 TimerClock()
 {
  update();
 }

 ~TimerClock()
 {
 }

 void update()
 {
  _start = high_resolution_clock::now();
 }
 //获取秒
 double getTimerSecond()
 {
  return getTimerMicroSec() * 0.000001;
 }
 //获取毫秒
 double getTimerMilliSec()
 {
  return getTimerMicroSec()*0.001;
 }
 //获取微妙
 long long getTimerMicroSec()
 {
  //当前时钟减去开始时钟的count
  return duration_cast<microseconds>(high_resolution_clock::now() - _start).count();
 }
private:
 time_point<high_resolution_clock>_start;
};

int main(){
    TimerClock TC;
    TC.update();
    // do your work here.
    cout << "cost time:" << TC.getTimerMilliSec() <<"ms"<< endl;
}
endsnippet
#}}}

