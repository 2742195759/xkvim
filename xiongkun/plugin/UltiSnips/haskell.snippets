snippet exp_re "example of regex.base and regex.posix"
-- add package.yaml: 
-- regex-base
-- regex-posix

import Text.Regex.Base
import Text.Regex.Posix ((=~),(=~~)) -- or TDFA or PCRE or ...

main = do
    print b
    print c
    print d
  where
    b :: Bool
    b = ("abaca" =~ "(.)a")
    c :: [MatchArray]
    c = ("abaca" =~ "(.)a")
    d :: Maybe (String,String,String,[String])
    d = ("abaca" =~~ "(.)a")

endsnippet


snippet exp_register "example of register system for RPC."
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE ExistentialQuantification #-}

module Main (main) where

import Lib

-- Registration system...
-- type class is very powerful.

class Package a where
    data Input a
    data Output a
    process :: Input a -> Output a
    parse   :: a -> String -> Input a
    preproc :: Output a -> String


data Succ = Succ
instance Package Succ where
    data Input Succ = SuccInput Int
    data Output Succ = SuccOutput Int
    process (SuccInput x) = SuccOutput (x + 1)
    parse _ y  = (SuccInput . read) y
    preproc (SuccOutput x) = show x

data Concat = Concat
instance Package Concat where
    data Input Concat = ConcatInput String
    data Output Concat = ConcatOutput String
    process (ConcatInput x) = ConcatOutput (x ++ "\n")
    parse _ y  = ConcatInput y
    preproc (ConcatOutput x) = show x

data RegItem = forall a. (Package a) => RegItem a
data RegEnv = RegEnv [(String, RegItem)]

-- register machnisam
-- 1. monad env
-- 2. map from :: ByteString -> read

-- ('concat', 'sdf')
-- ('succ', 1)

-- env + id + input -> output
--
run :: RegEnv -> String -> String -> IO ()
run (RegEnv env) method input_str = do 
    let res = lookup method env
    case res of
        Nothing -> putStrLn "not found"
        Just (RegItem p) -> do
            let inp = parse p input_str
            let out = process inp
            putStrLn $ preproc out

runall :: RegEnv -> [(String, String)] -> IO ()
runall env [] = return ()
runall env (x:xs) = do
    run env (fst x) (snd x)
    runall env xs

main :: IO () 
{-main = run (RegEnv [("succ", (RegItem Succ)), ("concat", (RegItem Concat))]) "concat" "1"-}
main = runall (RegEnv [("succ", (RegItem Succ)), ("concat", (RegItem Concat))]) [("concat", "1"), ("succ", "2")]
endsnippet

snippet subprocess "no description"
import System.Process
import System.IO
import Data.Traversable (mapM)
import Data.List (isInfixOf)
import System.Exit
import Control.Concurrent

main :: IO ()
main = do
     (_, Just hout, _, _) <- createProcess ((proc "ls" []) { std_out = CreatePipe })
     allTests <- hGetContents hout >>= return . gatherTests
     mapM (getOutputFromTest stateCollector) (take 10000 allTests) >>= putStrLn . unlines

gatherTests :: String -> [String]
gatherTests x = filter isTestFile $ lines x
            where isTestFile = isInfixOf "test_sub_graph_"

paddleCinnEnv :: [(String, String)]
paddleCinnEnv = [   ("PYTHONPATH", "/home/ssd2/xiongkun/Paddle/build/python/")
                  -- , ("GLOG_vmodule", "trivial_op_impl=4")
                  {-, ("CUDA_VISIBLE_DEVICES", "1")-}
                ]

getOutputFromTest :: (String -> String -> String) -> String -> IO String
getOutputFromTest outputer file = do
    (exitcode, out, err) <- readCreateProcessWithExitCode ((proc "bash" ["-c", "source ~/.bashrc && python ./" ++ file ++ " 2>&1"])
                                                                        { std_out = CreatePipe,
                                                                          env = Just paddleCinnEnv}) ""
    -- ??? CreateProcess + hGetContent + waitForProcess will hanging forever.
    return $ outputer file out

outputCollector :: String -> String -> String
outputCollector file output = "Start unittest: " ++ file ++ "\n" ++ output

stateCollector :: String -> String -> String
stateCollector file output = "Start unittest: " ++ file ++ "\n" ++ isOk output
                    where isOk x = if isInfixOf "OK" x then "Success\n" else "Failed\n"

endsnippet