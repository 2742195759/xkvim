#{{{ to_static
snippet to_static "some dygraph-to-static utility function"

from paddle.jit import to_static
from paddle.static import InputSpec
def create_input_specs():
    src_word = paddle.static.InputSpec(
        name="src_word", shape=[None, None], dtype="int64")
    trg_word = paddle.static.InputSpec(
        name="trg_word", shape=[None, None], dtype="int64")
    return [
        src_word, trg_word
    ]
    
def apply_to_static(config, model):
    support_to_static = config.get('to_static', False)
    if support_to_static:
        specs = create_input_specs()
        is_pass = config.get('enable_pass', False)
        if is_pass:
            build_strategy = paddle.static.BuildStrategy()
            #build_strategy.fuse_elewise_add_act_ops = True
            #build_strategy.fuse_bn_act_ops = True
            #build_strategy.fuse_bn_add_act_ops = True
            #build_strategy.enable_addto = True
        else: 
            build_strategy = None
        model = to_static(model, input_spec=specs, build_strategy=build_strategy)
    return model

endsnippet
#}}}

#{{{cv_import 
snippet cv_import "add the import statement of cvpods"
import cvpods
from cvpods.engine.base_runner import RunnerBase
from cvpods.checkpoint import Checkpointer
from cvpods.data import build_test_loader, build_train_loader
from cvpods.utils import (
    CommonMetricPrinter, JSONWriter, PathManager,
    TensorboardXWriter, collect_env_info, comm,
    seed_all_rng, setup_logger, VisdomWriter
)
from cvpods.engine import DefaultRunner, default_argument_parser, default_setup, hooks, launch
from cvpods.evaluation import ClassificationEvaluator
from cvpods.utils import comm
import cvpods.model_zoo as model_zoo
import logging

endsnippet
#}}}

#{{{cv_model_zoo 
snippet cv_model_zoo "add the model_zoo example"
model_zoo.get(
    ${1:"./config.py"},
    playground_path=${2:"/home/data/cvpods_example"},
    custom_config=dict(
        MODEL=dict(
            WEIGHTS="",
        ),
        DATASETS=dict(
            TRAIN="",
        ),
    )
)
$0
endsnippet
#}}}

#{{{cv_auc
snippet cv_auc "auc calculation example"
from sklearn.metrics import roc_auc_score
# $1 : (D, ) of (0/1)
# $2 : (D, ) of float
auc = roc_auc_score(${1:labels}.numpy(), ${2:labels}.numpy()) 
$0
endsnippet
#}}}

#{{{cv_info
snippet cv_info "info using logger"
logging.getLogger(${1:__name__}).info(${2:"output"})
$0
endsnippet
#}}}

#{{{cv_logfilter
snippet cv_logfilter "filter some header in logging"
class ${1:NoParsingFilter}(logging.Filter):
    def filter(self, record):
        return False
logging.getLogger(${2:"logger name"}).addFilter($1())
$0
endsnippet
#}}}

#{{{unittest
snippet unittest "add unittest for python code"
class ${1:TestCaseName}(unittest.TestCase):
    def setUp(self):
        ${1:pass}

    def tearDown(self):
        ${2:pass}

    def test_${3:add}(self):
        self.assertEqual(1, 1)

$0
endsnippet
#}}}

#{{{unittest_main
snippet unittest_main "add unittest main for python code"
if __name__ == "__main__":
    unittest.main()
endsnippet
#}}}

#{{{get
snippet get "inner word. dict get default" i
get(${1:"key"}, ${2:False})
endsnippet
#}}}

snippet xiongkun "#Add signature for python file" #{{{
#!/usr/bin/env python
# -*- encoding: utf-8 -*-
'''
@File               :   `!v expand("%:t")`
@Time               :   2021-08-21
@Author             :   Kun Xiong
@Contact            :   xk18@mails.tsinghua.edu.cn
@Last Modified by   :   `date +%Y-%m-%d`
@Last Modified time :   `date +%Y-%m-%d`
'''
endsnippet
#}}}

#{{{set_seed
snippet set_seed "set seed for all science computation library"
paddle.seed(${1:2021})
np.random.seed($1)
torch.set_rng_state(torch.manual_seed($1).get_state())
random.seed($1)
endsnippet
#}}}

#{{{ import_common
snippet import_common "import all the common package we used"
import sys
import os
import os.path as osp
endsnippet
#}}}

#{{{args
snippet args "add argments parser."
def parameter_parser():
    import argparse
    parser = argparse.ArgumentParser(description="Support Args:")

    parser.add_argument("--data_path",                 type=str,   default="./data/Amazon_Instant_Video/",  help="data path")
    parser.add_argument("--epoch_number",              type=int,   default=40,                              help="number of training epochs")
    parser.add_argument("--learning_rate",             type=float, default=0.01,                            help="learning rate")
    parser.add_argument("--intervener_soft",           type=bool,  default=False,                           help="the regular item of the MF model")

    return parser.parse_args()

args = parameter_parser()
endsnippet
#}}}

#{{{fread
snippet open "open file and read lines"
with open(${1:"output.txt"}, "r") as fp :
    ${2:lines} = fp.readlines()
endsnippet
#}}}

################
#
# Paddle Snippets
#
################

#{{{ # import_paddle
snippet import_paddle "import all paddle package."
from __future__ import print_function

import numpy as np
import os
import unittest

import paddle
import paddle.fluid as fluid
import paddle.fluid.core as core
import paddle.fluid.layers as layers
import paddle.fluid.framework as framework
from paddle.fluid.backward import append_backward
from paddle.fluid.framework import Program, program_guard
endsnippet
#}}}

#{{{ # pd -> paddle
snippet pd "pd" i
paddle
endsnippet
#}}}

#{{{ # pd.set_device
snippet pd.set_device "paddle.set_device('cpu')"
paddle.set_device('cpu')
endsnippet
#}}}

#{{{ # pd.enable_static
snippet pd.enable_static "paddle.enable_static()"
paddle.enable_static()
endsnippet
#}}}

#{{{ # pd.scope_guard
snippet pd.scope_guard "add scope guard statement for program"
with paddle.fluid.scope_guard(paddle.static.Scope()) : 
endsnippet
#}}}

################
#
# Matplotlib Examples
#
################

#{{{ # plt.line 
snippet plt.line "the example of draw a line"
def ${1:line}(ax):
    # 使用连续的实线来进行绘图
    # https://matplotlib.org/stable/tutorials/introductory/pyplot.html for details
    x = np.linspace(0, 2, 100)  # Sample data.
    ax.plot(x, x ** 2, label="y = x ^ 2", marker=None, linewidth=2.0, color='r') 
    #markers in [ '+' | ',' | '.' | '1' | '2' | '3' | '4' ] 
    ax.set_xlabel('x label')  # Add an x-label to the axes.
    ax.set_ylabel('y label')  # Add an x-label to the axes.
    ax.set_title ("example")  # Add a title to the axes.
    ax.legend()               # Add a legend.
endsnippet
#}}}

#{{{ # plt.scatter
snippet plt.scatter "the example of draw a scatter graph"
def scatter(ax):
    x = np.linspace(0, 2, 5)  # Sample data.
    ax.scatter(x, x ** 2, label="y = x ^ 2", marker='x')  # marker is " x | ^ | o | s " 
    ax.scatter(x, x ** 3, label="y = x ^ 3", marker='o')  # marker is " x | ^ | o | s " 
    ax.set_xlabel('x label')  # Add an x-label to the axes.
    ax.set_ylabel('y label')  # Add an x-label to the axes.
    ax.set_title ("example")  # Add a title to the axes.
    ax.legend()               # Add a legend.

def plot(ax):
    x = np.arange(0., 5., 0.2)
    ax.plot(x, x, 'r--', x, x**2, 'bs', x, x**3, 'g^') # the first r,b,g is color, the second is marker

endsnippet
#}}}

#{{{ # plt.histogram
snippet plt.histogram "the example of draw a histogram"
def histogram(ax):
    mu, sigma = 100, 15
    x = mu + sigma * np.random.randn(10000)
    n, bins, patches = ax.hist(x, bins=50, density=1, facecolor='g', alpha=0.75)
    ax.xlabel('Smarts')
    ax.ylabel('Probability')
    ax.title('Histogram of IQ')
    ax.text(60, .025, r'$\mu=100,\ \sigma=15$')
    ax.axis([40, 160, 0, 0.03])
    ax.grid(True)
endsnippet
#}}}

#{{{ # plt.text
snippet plt.text "the example of draw a text in arbitrary position"
${1:ax}.text(60, .025, r'$\mu=100,\ \sigma=15$')  # markdown mathjax is ok
endsnippet
#}}}

#{{{ # plt.save
snippet plt.save "the example of save a plot or animation"
fig.savefig('sales.png', transparent=False, dpi=80, bbox_inches="tight")
endsnippet
#}}}


