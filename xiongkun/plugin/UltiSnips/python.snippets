#{{{ to_static
snippet to_static "some dygraph-to-static utility function"

from paddle.jit import to_static
from paddle.static import InputSpec
def create_input_specs():
    src_word = paddle.static.InputSpec(
        name="src_word", shape=[None, None], dtype="int64")
    trg_word = paddle.static.InputSpec(
        name="trg_word", shape=[None, None], dtype="int64")
    return [
        src_word, trg_word
    ]
    
def apply_to_static(config, model):
    support_to_static = config.get('to_static', False)
    if support_to_static:
        specs = create_input_specs()
        is_pass = config.get('enable_pass', False)
        if is_pass:
            build_strategy = paddle.static.BuildStrategy()
            #build_strategy.fuse_elewise_add_act_ops = True
            #build_strategy.fuse_bn_act_ops = True
            #build_strategy.fuse_bn_add_act_ops = True
            #build_strategy.enable_addto = True
        else: 
            build_strategy = None
        model = to_static(model, input_spec=specs, build_strategy=build_strategy)
    return model

endsnippet
#}}}

#{{{cv_import 
snippet cv_import "add the import statement of cvpods"
import cvpods
from cvpods.engine.base_runner import RunnerBase
from cvpods.checkpoint import Checkpointer
from cvpods.data import build_test_loader, build_train_loader
from cvpods.utils import (
    CommonMetricPrinter, JSONWriter, PathManager,
    TensorboardXWriter, collect_env_info, comm,
    seed_all_rng, setup_logger, VisdomWriter
)
from cvpods.engine import DefaultRunner, default_argument_parser, default_setup, hooks, launch
from cvpods.evaluation import ClassificationEvaluator
from cvpods.utils import comm
import cvpods.model_zoo as model_zoo
import logging

endsnippet
#}}}

#{{{cv_model_zoo 
snippet cv_model_zoo "add the model_zoo example"
model_zoo.get(
    ${1:"./config.py"},
    playground_path=${2:"/home/data/cvpods_example"},
    custom_config=dict(
        MODEL=dict(
            WEIGHTS="",
        ),
        DATASETS=dict(
            TRAIN="",
        ),
    )
)
$0
endsnippet
#}}}

#{{{cv_auc
snippet cv_auc "auc calculation example"
from sklearn.metrics import roc_auc_score
# $1 : (D, ) of (0/1)
# $2 : (D, ) of float
auc = roc_auc_score(${1:labels}.numpy(), ${2:labels}.numpy()) 
$0
endsnippet
#}}}

#{{{cv_info
snippet cv_info "info using logger"
logging.getLogger(${1:__name__}).info(${2:"output"})
$0
endsnippet
#}}}

#{{{cv_logfilter
snippet cv_logfilter "filter some header in logging"
class ${1:NoParsingFilter}(logging.Filter):
    def filter(self, record):
        return False
logging.getLogger(${2:"logger name"}).addFilter($1())
$0
endsnippet
#}}}

# {{{
snippet Exception "Create Customized Exception."
class NetworkError(Exception):
    pass
endsnippet
# }}}

#{{{unittest
snippet unittest "add unittest for python code"
class ${1:TestCaseName}(unittest.TestCase):
    def setUp(self):
        ${1:pass}

    def tearDown(self):
        ${2:pass}

    def test_${3:add}(self):
        self.assertEqual(1, 1)
        with self.assertRaisesRegex(AssertionError,
                                    ('the context of the exception')):
            pass
$0
endsnippet
#}}}

#{{{unittest_main
snippet unittest_main "add unittest main for python code"
if __name__ == "__main__":
    unittest.main()
endsnippet
#}}}

#{{{get
snippet get "inner word. dict get default" i
get(${1:"key"}, ${2:False})
endsnippet
#}}}

snippet xiongkun "#Add signature for python file" #{{{
#!/usr/bin/env python
# -*- encoding: utf-8 -*-
'''
@File               :   `!v expand("%:t")`
@Time               :   2021-08-21
@Author             :   Kun Xiong
@Contact            :   xk18@mails.tsinghua.edu.cn
@Last Modified by   :   `date +%Y-%m-%d`
@Last Modified time :   `date +%Y-%m-%d`
'''
endsnippet
#}}}

#{{{set_seed
snippet set_seed "set seed for all science computation library"
paddle.seed(${1:2021})
np.random.seed($1)
torch.set_rng_state(torch.manual_seed($1).get_state())
random.seed($1)
endsnippet
#}}}

#{{{ import_common
snippet import_common "import all the common package we used"
import sys
import os
import os.path as osp
endsnippet
#}}}

#{{{args
snippet args "add argments parser."
def parameter_parser():
    import argparse
    parser = argparse.ArgumentParser(description="Support Args:")

    parser.add_argument("--data_path",                 type=str,   default="./data/Amazon_Instant_Video/",  help="data path")
    parser.add_argument("--epoch_number",              type=int,   default=40,                              help="number of training epochs")
    parser.add_argument("--learning_rate",             type=float, default=0.01,                            help="learning rate")
    parser.add_argument("--intervener_soft",           type=bool,  default=False,                           help="the regular item of the MF model")

    return parser.parse_args()

args = parameter_parser()
endsnippet
#}}}

#{{{fread
snippet fread "open file and read lines"
with open(${1:"output.txt"}, "r") as fp :
    ${2:lines} = fp.readlines()
endsnippet
#}}}

################
#
# Paddle Snippets
#
################

#{{{ # import_paddle
snippet import_paddle "import all paddle package."
from __future__ import print_function

import numpy as np
import os
import unittest

import paddle
import paddle.fluid as fluid
import paddle.fluid.core as core
import paddle.fluid.layers as layers
import paddle.fluid.framework as framework
from paddle.fluid.backward import append_backward
from paddle.fluid.framework import Program, program_guard
endsnippet
#}}}

#{{{ # pd -> paddle
snippet pd "pd" i
paddle
endsnippet
#}}}

#{{{ # pd.set_device
snippet pd.set_device "paddle.set_device('cpu')"
paddle.set_device('cpu')
endsnippet
#}}}

#{{{ # pd.enable_static
snippet pd.enable_static "paddle.enable_static()"
paddle.enable_static()
endsnippet
#}}}

#{{{ # pd.scope_guard
snippet pd.scope_guard "add scope guard statement for program"
with paddle.fluid.scope_guard(paddle.static.Scope()) : 
endsnippet
#}}}

#{{{ # pd.profile
snippet pd_profile_cpu "add profile"
"""
profile 1: output a chrome timeline.
"""
prof = profiler.Profiler(scheduler=[10, 20],  #{{{
                         targets=[profiler.ProfilerTarget.CPU, profiler.ProfilerTarget.GPU],
                         on_trace_ready = profiler.export_chrome_tracing('./log'),
                         ) 
prof.start()  
for i in range(30):
    loss = net(inp)   
    prof.step()
prof.stop()
prof.summary(op_detail=True)
#}}}
"""
profile 2: output a terminal profile report
"""
prof = paddle.utils.profiler.Profiler()  #{{{
"""
self.options = {
    'state': 'All',
    'sorted_key': 'default',
    'tracer_level': 'Default',
    'batch_range': [0, sys.maxsize],
    'output_thread_detail': False,
    'profile_path': 'none',
    'timeline_path': 'none',
    'op_summary_path': 'none'
}
"""
prof.profiler_options.options['profile_path'] = "./paddle_profile.txt"
prof.profiler_options.options['batch_range'] = [10, 20] 
prof.start()  
with prof:
    for i in range(30):
        loss = net(inp)   
        paddle.utils.get_profiler().record_step()
#}}}
endsnippet
#}}}

#{{{ # pd.nvprofile
snippet pd_profile_cuda "cuda profile"
import os
class PaddleProfiler:
    def __init__(self, start, end):
        self.s = start
        self.e = end
        self.cur = 0

    def step(self):
        self.cur += 1
        if self.cur == self.s:
            self.profile_start()
        if self.cur == self.e:
            self.profile_stop()
        if self.cur > self.s and self.cur < self.e:
            self.profile_step()

    def profile_start(self):
        from paddle.framework import core
        core.nvprof_start()
        core.nvprof_enable_record_event()
        core.nvprof_nvtx_push(str(self.cur))

    def profile_step(self):
        from paddle.framework import core
        core.nvprof_nvtx_pop()
        core.nvprof_nvtx_push(str(self.cur))

    def profile_stop(self):
        from paddle.framework import core
        core.nvprof_nvtx_pop()
        core.nvprof_stop()
        os._exit(0)
pp = PaddleProfiler(100, 110)
for batch in batches:
    pp.step()

with paddle.fluid.profiler._nvprof_range(i, 10, 20):
    forward()
endsnippet
#}}}

#{{{ # pd.in_eager
snippet pd.in_eager "is paddle in eager mode ? "
if _in_eager_mode():
    return _C_ops.final_state_allclose()
endsnippet
#}}}

snippet pd.mode_import "non_static_mode"  #{{{
from paddle.fluid.framework import in_dygraph_mode, non_static_mode, _in_legacy_dygraph
endsnippet
#}}}

################
#
# Matplotlib Examples
#
################

#{{{ # plt.line 
snippet plt.line "the example of draw a line"
def ${1:line}(ax):
    # 使用连续的实线来进行绘图
    # https://matplotlib.org/stable/tutorials/introductory/pyplot.html for details
    x = np.linspace(0, 2, 100)  # Sample data.
    ax.plot(x, x ** 2, label="y = x ^ 2", marker=None, linewidth=2.0, color='r') 
    #markers in [ '+' | ',' | '.' | '1' | '2' | '3' | '4' ] 
    ax.set_xlabel('x label')  # Add an x-label to the axes.
    ax.set_ylabel('y label')  # Add an x-label to the axes.
    ax.set_title ("example")  # Add a title to the axes.
    ax.legend()               # Add a legend.
endsnippet
#}}}

#{{{ # plt.scatter
snippet plt.scatter "the example of draw a scatter graph"
def scatter(ax):
    x = np.linspace(0, 2, 5)  # Sample data.
    ax.scatter(x, x ** 2, label="y = x ^ 2", marker='x')  # marker is " x | ^ | o | s " 
    ax.scatter(x, x ** 3, label="y = x ^ 3", marker='o')  # marker is " x | ^ | o | s " 
    ax.set_xlabel('x label')  # Add an x-label to the axes.
    ax.set_ylabel('y label')  # Add an x-label to the axes.
    ax.set_title ("example")  # Add a title to the axes.
    ax.legend()               # Add a legend.

def plot(ax):
    x = np.arange(0., 5., 0.2)
    ax.plot(x, x, 'r--', x, x**2, 'bs', x, x**3, 'g^') # the first r,b,g is color, the second is marker

endsnippet
#}}}

#{{{ # plt.histogram
snippet plt.histogram "the example of draw a histogram"
def histogram(ax):
    mu, sigma = 100, 15
    x = mu + sigma * np.random.randn(10000)
    n, bins, patches = ax.hist(x, bins=50, density=1, facecolor='g', alpha=0.75)
    ax.xlabel('Smarts')
    ax.ylabel('Probability')
    ax.title('Histogram of IQ')
    ax.text(60, .025, r'$\mu=100,\ \sigma=15$')
    ax.axis([40, 160, 0, 0.03])
    ax.grid(True)
endsnippet
#}}}

#{{{ # plt.text
snippet plt.text "the example of draw a text in arbitrary position"
${1:ax}.text(60, .025, r'$\mu=100,\ \sigma=15$')  # markdown mathjax is ok
endsnippet
#}}}

#{{{ # plt.save
snippet plt.save "the example of save a plot or animation"
fig.savefig('sales.png', transparent=False, dpi=80, bbox_inches="tight")
endsnippet
#}}}

##################
#
# Cvpods Snippets
#
##################

#{{{ # VisdomWriter Example
snippet cvpods.visdomwriter "cvpods visdom writer example"
# connect to the visdom server, construction step
visdom = VisdomWriter(self.cfg.VISDOM.HOST, self.cfg.VISDOM.PORT, 20, ['name'], self.cfg.VISDOM.ENV_PREFIX)
# use a event storage as container
with EventStorage() as storage:
    # data prepare step
    storage.put_scalar('name', value)
    # write 
    visdom.write()
	storage.step()
endsnippet
#}}}

###############
#
# Ply snippets
#
###############

#{{{ # p_
snippet p_ "p_function of ply. a syntax parser function"
def p_${1:expr}(p):
    '''
    $1 : ${2:TODO}
    '''
    ${3:p[0] = p[1]}

$0
endsnippet
#}}}

###############
#
# Threading
#
###############

snippet Lock "Threading Lock" #{{{
from threading import Lock
l = Lock() # normal lock
l = RLock() # reusable lock. multi-acquire and multi-release
l.acquire()
l.release()
endsnippet
#}}}

snippet subprocess "subprocess example in python" #{{{
import subprocess
# create subprocess
child = subprocess.Popen(cmd, shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, universal_newlines=True)
# write into the stdin: string
child.stdin.write("write into.")
# C-D
child.stdin.close()
# get output from stdout
info = child.stdout.read(num_bytes)
info = child.stdout.readline()

endsnippet
#}}}

snippet Thread "create thread and run a function." #{{{
import threading
# exit after run
threading.Thread(target=func, args=(a1,), daemon=True).start() 
# exit manually
threading.Thread(target=func, args=(a1,), daemon=False).start() 
endsnippet
#}}}

snippet pd.speed_test "[dygraph] speed test example for evaluation of matmul." #{{{
import time
import paddle

shape = (100 ,100)
times = 10000
average_time = 30

paddle.set_device('gpu')
x = paddle.to_tensor(np.random.rand(*shape))
y = paddle.to_tensor(np.random.rand(*shape))

time_list = []
for _ in range(average_time):
    start = time.time()
    for i in range(times):
        z = paddle.matmul(x, y)
    time_list.append( time.time() - start )

print ("AvgTime: ", sum(time_list) * 1.0 / len(time_list))
endsnippet
#}}}

snippet pd.static_example "[static] a static graph example" #{{{
import paddle
import paddle.fluid as fluid
import numpy as np
import sys
import os
import os.path as osp
import numpy as np
import os
import unittest

import paddle
import paddle.fluid as fluid
import paddle.fluid.core as core
import paddle.fluid.layers as layers
import paddle.fluid.framework as framework
from paddle.fluid.backward import append_backward
from paddle.fluid.framework import Program, program_guard

paddle.enable_static()

# TODO( Snippet paddle import. )
paddle.set_device('cpu')
paddle.enable_static()
main_prg, startup_prg = paddle.static.Program(), paddle.static.Program()
with program_guard(main_prg, startup_prg):
    var_a = paddle.static.data(name='a', shape=[2,2], dtype='float32')
    var_a.stop_gradient = False
    linear = paddle.nn.Linear(2, 2)
    exe = paddle.static.Executor()
    sgd = paddle.optimizer.SGD(0.001, parameters=[linear.weight])
    sgd.minimize(linear(var_a).mean())
    exe.run(startup_prg)
    print (main_prg)
    out = exe.run(main_prg, 
                  feed={'a': np.array([[1.0,2],[3,4]], dtype='float32'), 
                        'b': np.array([0])}, 
                  fetch_list=[var_a])
    print("RuntimeShape", out[0].shape)
endsnippet
#}}}

snippet doc "create doc for python function." #{{{
    '''
    Description of function.

    Parameters
    ----------
    parameter_name:
        description of parameter.
    
    Returns
    -------
    A tuple of g_labels, g_view, g_nout, g_count
    g_labels:
        the layout of all labels in a string
    g_view:
        the index table
    g_nout:
        the number of output dimensions
    g_count:
        the counter array for dimension contractions
    '''
endsnippet
#}}}

snippet string_example "string method example." #{{{
x = "abcdefg".replace("abc", "xxx") # "xxxdefg
x = "bbcaaadd".count('a') # 3
x, *y = "xxxx".split("->") # x: "xxxx", y: []
res = map(lambda x: x.strip(), "x , y ".split(",")) # res = ['x', 'y']
x = "a".isalpha() # True
endsnippet
#}}}

snippet default_dict "default_dict" #{{{
import collections
ddict = collections.defaultdict(lambda: [])
endsnippet
#}}}

snippet counter "counter example from collections" #{{{
import collections
a = "11222333"
cnt = collections.Counter(a)
list(cnt.elements()) # ['1', '2', '3']
cnt.get("1") # 2
endsnippet
#}}}

snippet prod "prod of a list" #{{{
import numy as np
np.prod([1,2,3,], dtype=np.int64)  # 6
endsnippet
#}}}

snippet filter "filter a list or map" #{{{
list = [None, 1, 2, 3]
# while function == True, we keep it.
filter(None, list) # [1,2,3]
filter(lambda x: x == 1, list) # [1]
endsnippet
#}}}

snippet func_cache "function cache provided by functools" #{{{
from functools import lru_cache
# function is a function. the lru_cache is a wrapper.
# so we call the lru_cache and reset the function with wrapped function.
function = lru_cache(maxsize=128)(function)
endsnippet
#}}}

snippet print_to_file "print into a file." #{{{
with open(${2:"./output.txt"}, "w") as fp:
    import sys
    saved = sys.stdout
    sys.stdout = fp
    print (${1:"hello world"})
    sys.stdout = saved
endsnippet
#}}}

snippet fake_data "paddle fake dataloader for model." #{{{
# method 1: fake data_loader .
BATCH_SIZE = 128
BATCH_NUM = 665
IMAGE_SIZE = (3, 224, 224)
class RandomDataset(paddle.io.Dataset):
    def __init__(self, num_samples):
        self.num_samples = num_samples

    def __getitem__(self, idx):
        image = np.random.random(IMAGE_SIZE).astype('float32')
        label = np.random.randint(0, 1, 1).astype('int64')
        return image, label

    def __len__(self):
        return self.num_samples

dataset = RandomDataset(665 * BATCH_SIZE)
data_loader = paddle.io.DataLoader(dataset,
            batch_size=BATCH_SIZE,
            shuffle=True,
            drop_last=True,
            num_workers=2)
endsnippet
#}}}

snippet fake_data "paddle fake data for training." #{{{
# method 2: fake data directly.
inputs_node = paddle.rand((args.batch_size, args.msa_length // args.dap_size, args.res_length, args.cm))
inputs_pair = paddle.rand((args.batch_size, args.res_length // args.dap_size, args.res_length, args.cz))

node_mask = paddle.ones((args.batch_size, args.msa_length, args.res_length))
pair_mask = paddle.ones((args.batch_size, args.res_length, args.res_length))

endsnippet
#}}}

snippet tensorflow_static "tensorflow static example" #{{{
# import tensorflow as tf

import tensorflow.compat.v1 as tf
tf.disable_eager_execution()
# m0 = tf.reshape(tf.random.normal(shape=[2, 3]), [2, -1])
# m1 = tf.reshape(tf.random.normal(shape=[3, 5]), [3, -1])
m0 = tf.placeholder(tf.float32, (None, 2, None), name='Xs')
m1 = tf.placeholder(tf.float32, (None, None, 3), name='ys')
print(m0, m1)

e = tf.einsum('ijk, ijk->ijk', m0, m1)
# output[i,k] = sum_j m0[i,j] * m1[j, k]
print(e.shape)
print(e)
print(tf.get_default_graph())

endsnippet
#}}}

snippet example_tf_to_static "tensorflow dygraph to static example" #{{{
import tensorflow as tf
@tf.function  # The decorator converts `add` into a `Function`.
def add(a, b):
  return a + b

import pdb
pdb.set_trace() 
add(tf.ones([2, 2]), tf.ones([2, 2]))  #  [[2., 2.], [2., 2.]]
print(tf.autograph.to_code(add.python_function))
endsnippet
#}}}

snippet example_pd_to_static "paddle dygraph to static example, for quick verifing" #{{{
import paddle
def vlist_of_dict(x):
    a = []
    for i in range(x):       
        pp = {"config": x}
        a.append(pp)          
    return a 

b = paddle.to_tensor([True, False, True])
x = paddle.to_tensor([3])
z = paddle.to_tensor([6])
y = paddle.rand((100, 2, 2))

print(paddle.jit.to_static(vlist_of_dict).code)
print(paddle.jit.to_static(vlist_of_dict)(x))
endsnippet
#}}}

snippet example_pd_simple_net "a simple net with linear as parameters" #{{{
import paddle
import numpy as np
import random
from numpy.testing import assert_array_equal

class SimpleNet(paddle.nn.Layer):               
    def __init__(self):
        super(SimpleNet, self).__init__()
        self.linear1 = paddle.nn.Linear(10, 3)    
        self.linear2 = paddle.nn.Linear(3, 1)    
        
    def forward(self, x):
        out1 = self.linear1(x)
        out2 = self.linear2(out1) 
        return [out1, out2]

def run_graph(inp, to_static):
    """ dygraph only backward.
    """
    paddle.seed(2021)
    np.random.seed(2021)
    random.seed(2021)
    net = SimpleNet()
    if to_static:
        net = paddle.jit.to_static(net)
    loss = net(inp)
    #loss = net(inp)
    #loss[0].backward()
    #print (net.linear1.weight.grad)
    return loss

def run_dygraph_optimizer(inp, to_static):
    """ dygraph train + SGD optimizer
    """
    paddle.seed(2021)
    np.random.seed(2021)
    random.seed(2021)
    net = SimpleNet()
    optimizer = paddle.optimizer.SGD(learning_rate=0.3,
        parameters=net.parameters())
    for i in range(10):
        optimizer.clear_grad()
        loss = net(inp)
        print("XK: ", loss.item())
        loss.backward()
        optimizer.step()
    return loss
    

inp = paddle.rand((10,))
assert_array_equal(run_graph(inp, True)[0].numpy(), run_graph(inp, False)[0].numpy(), "Not Equal in dygraph and static graph", True)
endsnippet
#}}}

snippet example_pd_unittest "a simple but complete unittest for paddle" #{{{
# Copyright (c) 2020 PaddlePaddle Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from __future__ import print_function
import unittest
import paddle
import numpy as np
import random
from paddle.fluid.dygraph.container import BufferList
from numpy.testing import assert_array_equal
from paddle import fluid

class SimpleNet(paddle.nn.Layer):               
    def __init__(self):
        super(SimpleNet, self).__init__()
        self.linear1 = paddle.nn.Linear(10, 3)    
        self.linear2 = paddle.nn.Linear(3, 1)    
        self.hidden  = BufferList([
            paddle.to_tensor([1.0]), 
            paddle.to_tensor([2.0]),
        ])
        #self.hidden  = paddle.to_tensor([1.0])
        
    def forward(self, x):
        out1 = self.linear1(x)
        out2 = self.linear2(out1) + self.hidden[0]
        self.hidden.assign([
            paddle.to_tensor([3.0]), 
            paddle.to_tensor([4.0])
        ])
        return [out1, out2]

def run_graph(inp, to_static):
    paddle.seed(2021)
    np.random.seed(2021)
    random.seed(2021)
    net = SimpleNet()
    if to_static:
        net = paddle.jit.to_static(net)
    loss = net(inp)
    return loss

class TestBufferList(unittest.TestCase):

    def test_bufferlist(self):
        inp = paddle.rand((10,))
        assert_array_equal(run_graph(inp, True)[0].numpy(), run_graph(inp, False)[0].numpy(), "Not Equal in dygraph and static graph", True)


if __name__ == '__main__':
    with fluid.framework._test_eager_guard():
        unittest.main()
endsnippet
#}}}

snippet debug_print_net_parameter "print all the net parameters" #{{{
for name, param in net.named_parameters():
    if param is not None:
        print (name, param.cast("float32").mean())
endsnippet
#}}}

snippet load_inference_model "load and run inference model" #{{{
def my_executor():
    exe = paddle.static.Executor()
    path = "./output_inference/cascade_mask_rcnn_r50_fpn_1x_coco/model" 
    program, feeds, fetchs = paddle.static.load_inference_model(path, exe)
    import pickle
    inputs = pickle.load(open("/home/data/cacade.in", "rb"))
    #inputs = pickle.dump(inputs, open("/home/data/cacade.in", "wb"))
    results = exe.run(program,
              feed=inputs,
              fetch_list=fetchs)
    print (results)
endsnippet
#}}}

snippet example_torchscript "a example use torch script to dy2static" #{{{
import torch
import torch.nn as nn
import numpy as np
def func(grad):
   return grad * 2

@torch.jit.script
def f(x):
    x.requires_grad=True
    x.register_hook(func)
    return 2 * x
    
print(f(torch.randn(2, 2)))
endsnippet 
#}}}

snippet absolute_import "absolute_import by imp library." #{{{
import imp
ggg = imp.load_source("ggg", "/home/data/global.py")
ggg.global_loss = x
endsnippet 
#}}}

snippet debug_accurary "a example to debug network accuracy problem in dygraph." #{{{
for i in range(30):
    optimizer.clear_grad()
    loss = net(src_word, src_pos)
    loss = loss.sum()
    print ("Step: ", i)
    print ("    =======Loss=========")
    print("XK: ", loss.item())
    loss.backward()
    print ("    =======GradAndWeights=========")
    for name, param in net.named_parameters():
        if param.grad is not None:
            print (name+"_grad", param.grad.mean().item())
        if param is not None:
            print (name, param.mean().item())
    optimizer.step()
    print ("    =======Update=========")
    for name, param in net.named_parameters():
        if param is not None:
            print (name, param.mean().item())
endsnippet 
#}}}

snippet debug_print "print a tensor value in static graph" #{{{
paddle.static.Print(${1}.mean(), message="Memory", print_phase="forward")
endsnippet 
#}}}

snippet debug_accurary_dy2static "a example to debug network accuracy problem in dygraph." #{{{
import paddle
import numpy as np
import random
from numpy.testing import assert_array_equal

paddle.set_printoptions(precision=31)

def parameter_parser():
    import argparse
    parser = argparse.ArgumentParser(description="Support Args:")
    parser.add_argument("--to_static",  type=str,   default="true",  help="data path")
    return parser.parse_args()

args = parameter_parser()

class SimpleNet(paddle.nn.Layer):               
    def __init__(self):
        super(SimpleNet, self).__init__()
        self.linear0 = paddle.nn.Linear(64, 64)    
        self.linear1 = paddle.nn.Linear(64, 64)    
        self.linear2 = paddle.nn.Linear(64, 64)    
        self.linear3 = paddle.nn.Linear(64, 64)    
        self.linear4 = paddle.nn.Linear(64, 64)    
        
    def forward(self, x):
        x = self.linear0(x)

        x1 = x + 0
        x2 = x + 0
        x3 = x + 0

        #x1.register_hook(lambda x: print("x1.grad", x.mean()))
        #x2.register_hook(lambda x: print("x2.grad", x.mean()))
        #x3.register_hook(lambda x: print("x3.grad", x.mean()))

        out1 = self.linear1(x1) # tmp0
        out2 = self.linear2(x2) # tmp1
        out3 = self.linear3(x3) # tmp2

        s = out1.mean() + out2.mean() + out3.mean()
        #s = out3.mean() + out1.mean() + out2.mean()
        return s

def run_dygraph_optimizer(to_static):
    """ dygraph train + SGD optimizer
    """
    paddle.seed(2021)
    np.random.seed(2021)
    random.seed(2021)
    net = SimpleNet()

    if to_static: 
        net = paddle.jit.to_static(net)

    inp = paddle.rand((2, 2048, 64, 64))
    optimizer = paddle.optimizer.SGD(learning_rate=0.03,
        parameters=net.parameters())
    for i in range(10):
        print ("======== New Step =======")
        optimizer.clear_grad()
        loss = net(inp)
        for name, param in net.named_parameters():
            if param is not None:
                print ("param: ", name, param.cast("float32").mean())
        loss.backward()
        for name, param in net.named_parameters():
            if param.grad is not None:
                print ("grad:  ", name, param.grad.cast("float32").mean())
        print ("loss", loss.mean())
        optimizer.step()
    return loss
    
if args.to_static == "true":
    run_dygraph_optimizer(True).numpy()
else: 
    run_dygraph_optimizer(False).numpy()
    
"""
Start command: 
PYTHONPATH="/home/data/Paddle/build/python" python3.7 /home/data/test/test_aggre.py --to_static=false > /home/data/log1.txt && PYTHONPATH="/home/data/Paddle/build/python" python3.7 /home/data/test/test_aggre.py --to_static=true > /home/data/log2.txt

Vim diff command:
diffsplit 
"""
endsnippet 
#}}}

snippet example_setup "a example of setup.py." #{{{
"""Setup for pip package."""

import PPAutoDiff

from setuptools import find_packages, setup


def read_requirements_file(filepath):
    with open(filepath) as fin:
        requirements = fin.read()
    return requirements


REQUIRED_PACKAGES = read_requirements_file("requirements.txt")


setup(
    name='ppautodiff',
    version=PPAutoDiff.__version__,
    description=
    ('A tools to automatically diff precision between Paddle and Pytorch Model.'
     ),
    long_description='',
    url='https://github.com/PaddlePaddle/PPAutoDiff',
    author='PaddlePaddle Author',
    author_email='',
    install_requires=REQUIRED_PACKAGES,
    packages=find_packages(),
    include_package_data=True,
    python_requires=">=3.7",
    classifiers=[
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.7",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "License :: OSI Approved :: Apache Software License",
        "Operating System :: OS Independent",
    ],
    license='Apache 2.0',
    keywords=('ppautodiff automatically diff precision between paddle and pytorch model'),
)
endsnippet 
#}}}

snippet github_workflow "a example of github workflow" #{{{
#workflow name
name: Test 

#trigger event
on: [push, pull_request]

# jobs definition
jobs:
  # name of job
  Test:
    # name of job
    name: Test
    # which os platform you want to run on
    runs-on: ubuntu-20.04
    # ...
    permissions:
      pull-requests: write
      contents: read
      id-token: write
    # steps to run: sequential run
    steps:
      # use: call github action. see github/action for all list of actions
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v1
        with:
          python-version: 3.8
      # customed command definition
      - name: Install dependencies
        # customed command 
        # | is to continue a line
        run: |
          # each line is a command
          python -m pip install --upgrade pip
          make install
      # make test. write all you command in Makefile.
      - name: run the command
        run: make test
endsnippet 
#}}}

snippet print_memory "a example of print memory." #{{{
import  os
import re
import time
def print_memory(number):
    pattern = r"(\d+)MiB /"
    os.system("nvidia-smi > /home/data/tmp.txt")
    with open("/home/data/tmp.txt", "r") as fp :
        lines = fp.readlines()
    out = []
    for line in lines:
        memory = re.search(pattern, line)
        if memory is not None:
            out.append(memory.group(1))

    return out[number] + "Mb"
print(print_memory(3))
endsnippet 
#}}}

snippet print_train_program "print the train program of dy2static." #{{{
print(net.forward.get_concrete_program(inp)[1].train_program)
endsnippet  
#}}}

snippet print_main_program "print the default main program of static." #{{{
print(paddle.static.default_main_program())
endsnippet 
#}}}
